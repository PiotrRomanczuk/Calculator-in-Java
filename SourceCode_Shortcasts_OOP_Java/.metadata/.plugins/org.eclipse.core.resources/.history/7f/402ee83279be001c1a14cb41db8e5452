package onlineShop.processing;

public class ShoppingCart {
	//attributes
	private int quantityProducts;
	private double productSum;//previous name was 'orderValue'
	
	/*You can also leave out completely
	 * the definition of the standard constructor.
	 * In this case an empty standard constructor is
	 * implicitly added by the Java compiler.
	 * Even if you don't see such a constructor here in the source code, 
	 * it can still be invoked with the new-operator
	 * and it will create an object -instance of this class
	 * */
	public ShoppingCart() {} //This is the standard constructor
	
	//copy constructor
	public ShoppingCart(ShoppingCart originalShoppingCart){
		/*Without this constructor 
		 * if you are copying a Customer-object, 
		 * you will get a shallow copy
		 * 
		 * With this constructor
		 * if you are copying a Customer-object,
		 * you will get a deep copy*/
		this.productSum = originalShoppingCart.productSum;
	}
	
	//methods
	public double pricePerProduct(){
		/*This method will return the average price per product
		 * for this ShoppingCart*/
		
		/*The code block below uses 
		 * the first way for handling exceptions:
		 * 1.“Catch” the exception 
		 * within the method where it is “thrown”
		 * */
		double averagePricePerProduct;
		try{
			averagePricePerProduct = this.productSum / this.quantityProducts ;
		}catch(ArithmeticException ex){
			/*If there is a division by zero, 
			 * or something else goes wrong with the arithmetics,
			 * the averagePricePerProduct is set to a meaningful valid value
			 * */
			averagePricePerProduct = 0;
			System.out.println("averagePricePerProduct=" + averagePricePerProduct);
		}
		return averagePricePerProduct;
	
	}//pricePerProduct
	
	//getters and setters
	public int getQuantityProducts() {
		return quantityProducts;
	}

	public void setQuantityProducts(int quantityProducts) {
		this.quantityProducts = quantityProducts;
	}

	public double getProductSum() {
		return productSum;
	}

	public void setProductSum(double productSum) {
		this.productSum = productSum;
	}
}//class
